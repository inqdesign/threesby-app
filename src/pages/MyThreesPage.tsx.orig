import React from 'react';
import { useAuth } from '../hooks/useAuth';
import { supabase } from '../lib/supabase';
import { withRetry, handleSupabaseError } from '../lib/supabaseUtils';
import { Dialog, Transition } from '@headlessui/react';
import type { Profile, Pick } from '../types';
import { ItemModal } from '../components/ItemModal';
// SubNav import removed as it's now handled at the App level
import { Book, Package, MapPin, Check } from 'lucide-react';
import { Label } from '../components/Label';
import { useAppStore } from '../store';
import { SortableItem } from '../components/SortableItem';
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  TouchSensor,
  useSensor,
  useSensors,
  DragEndEvent
} from '@dnd-kit/core';
import {
  SortableContext,
  sortableKeyboardCoordinates,
  rectSortingStrategy
} from '@dnd-kit/sortable';

type Category = 'places' | 'products' | 'books';

interface MyThreesPageProps {
  profile?: Profile;
  picks?: Pick[];
  loading?: boolean;
  onSavePick?: (data: Partial<Pick>, selectedCategory: Category | null, selectedPick: Pick | null) => Promise<void>;
  onDeletePick?: (pick: Pick) => Promise<void>;
}

export function MyThreesPage({
  profile: propProfile,
  picks: propPicks,
  loading: propLoading,
  onSavePick: propOnSavePick,
  onDeletePick: propOnDeletePick
}: MyThreesPageProps = {}) {
  const { user } = useAuth();
  // Use app store for global state management
  const { fetchFeedPicks, fetchCurators } = useAppStore();
  // Store and use the profile state
  const [profileState, setProfile] = React.useState<Profile | null>(propProfile ? propProfile : null);
  const [picks, setPicks] = React.useState<Record<Category, Pick[]>>({
    places: propPicks ? propPicks.filter(pick => pick.category === 'places') : [],
    products: propPicks ? propPicks.filter(pick => pick.category === 'products') : [],
    books: propPicks ? propPicks.filter(pick => pick.category === 'books') : [],
  });
  const [loading, setLoading] = React.useState(propLoading !== undefined ? propLoading : true);
  const [showModal, setShowModal] = React.useState(false);
  const [selectedPick, setSelectedPick] = React.useState<Pick | null>(null);
  const [selectedCategory, setSelectedCategory] = React.useState<Category | null>(null);
  const [selectedRank, setSelectedRank] = React.useState<number | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = React.useState(false);
  const [pickToDelete, setPickToDelete] = React.useState<Pick | null>(null);
  // No longer using tabs
  const [showProfileModal, setShowProfileModal] = React.useState(false);

  // State for update feedback
  const [isUpdating, setIsUpdating] = React.useState(false);
  const [updateSuccess, setUpdateSuccess] = React.useState(false);
  const [updateMessage, setUpdateMessage] = React.useState('');

  // Enhanced useEffect to ensure data loads properly on first login
  React.useEffect(() => {
    if (user) {
      // Always fetch on mount if we have a user, regardless of prop values
      // This ensures data loads properly on first login
      fetchProfile();
      fetchPicks();
      
      // Also refresh the global store to ensure consistency across pages
      fetchFeedPicks();
      fetchCurators();
      
      console.log('MyThreesPage: Initial data fetch triggered');
    }
  }, [user]); // Only depend on user to prevent unnecessary fetches

  const fetchProfile = async () => {
    try {
      setLoading(true);
      const { data: profileData, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user?.id)
        .single();

      if (error) throw error;
      setProfile(profileData);
    } catch (error) {
      console.error('Error fetching profile:', error);
    } finally {
      setLoading(false);
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const fetchPicks = async () => {
    try {
      if (!user) return;
      
      setLoading(true);
      setIsUpdating(true);
      setUpdateMessage('Loading your picks...');
      
      // Use withRetry to handle connection issues
      const result = await withRetry(
        async () => {
          const { data, error } = await supabase
            .from('picks')
            .select('*')
            .eq('profile_id', user.id)
            .order('rank', { ascending: true });

          if (error) throw error;
          return data;
        },
        {
          maxRetries: 3,
          onRetry: (attempt, _error) => {
            console.log(`Retrying fetch picks (${attempt}/3)...`);
            setUpdateMessage(`Connection issue. Retrying (${attempt}/3)...`);
          }
        }
      );

      // Organize picks by category
      const categorizedPicks: Record<Category, Pick[]> = {
        places: [],
        products: [],
        books: [],
      }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

      result.forEach((pick: Pick) => {
        if (pick.category in categorizedPicks) {
          categorizedPicks[pick.category as Category].push(pick);
        }
      });

      setPicks(categorizedPicks);
      setUpdateSuccess(true);
      setUpdateMessage('Picks loaded successfully');
      
      // Hide success message after 1.5 seconds
      setTimeout(() => {
        setIsUpdating(false);
      }, 1500);
      
    } catch (error) {
      console.error('Error fetching picks:', error);
      setUpdateSuccess(false);
      setUpdateMessage(handleSupabaseError(error, 'Error loading picks. Please try again.'));
      
      // Hide error message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
      }, 3000);
    } finally {
      setLoading(false);
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handleSubmit = async () => {
    try {
      if (!user) return;
      
      // Update all picks to pending_review
      const { error: picksError } = await supabase
        .from('picks')
        .update({
          status: 'pending_review',
          updated_at: new Date().toISOString(),
          last_updated_at: new Date().toISOString(),
        })
        .eq('profile_id', user.id);

      if (picksError) throw picksError;

      // Update profile status to pending
      const { error: profileError } = await supabase
        .from('profiles')
        .update({
          status: 'pending',
          updated_at: new Date().toISOString(),
          last_submitted_at: new Date().toISOString(),
        })
        .eq('id', user.id);

      if (profileError) throw profileError;

      // Insert into submission_reviews
      await supabase
        .from('submission_reviews')
        .insert({
          profile_id: user.id,
          status: 'pending',
          created_at: new Date().toISOString(),
        });

      alert('Your picks have been submitted for review!');
      await fetchProfile();
    } catch (error) {
      console.error('Error submitting picks:', error);
      alert('Error submitting picks. Please try again.');
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handleUnpublish = async () => {
    try {
      if (!user) return;

      if (!confirm('Are you sure you want to unpublish your profile and picks?')) return;

      const { error: picksError } = await supabase
        .from('picks')
        .update({
          status: 'draft',
          updated_at: new Date().toISOString(),
          last_updated_at: new Date().toISOString(),
        })
        .eq('profile_id', user.id);

      if (picksError) throw picksError;

      const { error: profileError } = await supabase
        .from('profiles')
        .update({
          status: 'unpublished',
          updated_at: new Date().toISOString(),
        })
        .eq('id', user.id);

      if (profileError) throw profileError;

      alert('Your picks have been unpublished!');
      await fetchProfile();
    } catch (error) {
      console.error('Error unpublishing picks:', error);
      alert('Error unpublishing picks. Please try again.');
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handleCancelSubmission = async () => {
    if (!user) return;
    
    try {
      await supabase
        .from('profiles')
        .update({
          status: 'draft',
          updated_at: new Date().toISOString(),
        })
        .eq('id', user.id);

      await supabase
        .from('submission_reviews')
        .update({
          status: 'canceled',
          updated_at: new Date().toISOString(),
        })
        .eq('profile_id', user.id)
        .eq('status', 'pending');

      alert('Your submission has been canceled.');
      await fetchProfile();
    } catch (error) {
      console.error('Error canceling submission:', error);
      alert('Error canceling submission. Please try again.');
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const confirmDelete = (pick: Pick) => {
    setPickToDelete(pick);
    setShowDeleteConfirm(true);
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handleDelete = async (pick: Pick) => {
    try {
      setLoading(true);
      setIsUpdating(true);
      setUpdateMessage('Deleting your pick...');
      setUpdateSuccess(false);
      
      // Use withRetry to handle database operations with retry logic
      await withRetry(
        async () => {
          const { error } = await supabase
            .from('picks')
            .delete()
            .eq('id', pick.id);
          
          if (error) {
            throw new Error(`Failed to delete pick: ${error.message}`);
          }
          
          return true;
        },
        {
          maxRetries: 3,
          onRetry: (attempt, _error) => {
            console.log(`Retrying delete pick (${attempt}/3)...`);
            setUpdateMessage(`Connection issue. Retrying delete (${attempt}/3)...`);
          }
        }
      );
      
      // Refresh local picks data
      setUpdateMessage('Refreshing your picks...');
      await fetchPicks();
      
      // Refresh global app store data to ensure consistency across all pages
      setUpdateMessage('Syncing with other pages...');
      
      // Use withRetry for app store updates as well
      await withRetry(
        async () => {
          await fetchFeedPicks();
          await fetchCurators();
          return true;
        },
        {
          maxRetries: 2,
          onRetry: (attempt, _error) => {
            console.log(`Retrying sync with other pages (${attempt}/2)...`);
            setUpdateMessage(`Syncing with other pages... Retry ${attempt}/2`);
          }
        }
      );
      
      // Show success message
      setUpdateSuccess(true);
      setUpdateMessage('Your pick has been deleted!');
      
      // Reset UI state
      setShowModal(false);
      setSelectedPick(null);
      setSelectedCategory(null);
      setSelectedRank(null);
      setShowDeleteConfirm(false);
      setPickToDelete(null);
      
      // Hide success message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
        setUpdateSuccess(false);
      }, 3000);
      
    } catch (error) {
      console.error('Error deleting pick:', error);
      setUpdateSuccess(false);
      setUpdateMessage(handleSupabaseError(error, 'Error deleting pick. Please try again.'));
      
      // Hide error message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
      }, 3000);
    } finally {
      setLoading(false);
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handleSave = async (data: Partial<Pick>) => {
    try {
      setLoading(true);
      setIsUpdating(true);
      setUpdateMessage('Saving your pick...');
      setUpdateSuccess(false);
      
      // Validate required data
      if (!user?.id) {
        throw new Error('User must be logged in to save picks');
      }
      
      if (!selectedCategory) {
        throw new Error('No category selected');
      }
      
      if (!data.title) {
        throw new Error('Title is required');
      }

      // Get the new rank (if provided)
      const newRank = data.rank !== undefined ? data.rank : (selectedRank || 0);
      
      // Check if we're changing a pick's rank within the top 3 or from archive to top 3
      const isChangingRank = 
        selectedPick && 
        selectedPick.rank !== newRank;
      
      // Check if we're promoting from archive to top 3
      const isPromotingFromArchive = 
        isChangingRank && 
        selectedPick.rank === 0 && 
        newRank >= 1 && 
        newRank <= 3;
      
      // Check if we're reordering within the top 3
      const isReorderingTopPicks = 
        isChangingRank && 
        selectedPick.rank >= 1 && 
        selectedPick.rank <= 3 && 
        newRank >= 1 && 
        newRank <= 3;
      
      // Find the pick that's currently in the target position (if any)
      let displacedPick = null;
      if (isPromotingFromArchive || isReorderingTopPicks) {
        displacedPick = picks[selectedCategory].find(
          p => p.id !== selectedPick?.id && p.rank === newRank
        );
      }

      // Use withRetry to handle database operations with retry logic
      await withRetry(
        async () => {
          // First, update the selected pick
          if (selectedPick) {
            const { error } = await supabase
              .from('picks')
              .update({
                title: data.title,
                description: data.description,
                reference: data.reference,
                image_url: data.image_url || 'https://placehold.co/400x400/f3f2ed/9d9b9b?text=No+Image',
                rank: newRank,
                updated_at: new Date().toISOString(),
              })
              .eq('id', selectedPick.id);

            if (error) {
              console.error('Supabase update error:', error);
              throw new Error(`Failed to update pick: ${error.message}`);
            }
          } else {
            // If we're creating a new pick
            const { error } = await supabase
              .from('picks')
              .insert({
                profile_id: user?.id,
                title: data.title,
                description: data.description,
                reference: data.reference,
                image_url: data.image_url || 'https://placehold.co/400x400/f3f2ed/9d9b9b?text=No+Image',
                category: selectedCategory,
                rank: selectedRank || 0,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
              });

            if (error) {
              console.error('Supabase insert error:', error);
              throw new Error(`Failed to create new pick: ${error.message}`);
            }
          }

          // Then, handle the displaced pick
          if (displacedPick) {
            let newRank = 0; // Default to archive
            
            // If we're reordering within top 3, swap the ranks
            if (isReorderingTopPicks && selectedPick) {
              newRank = selectedPick.rank; // Give the displaced pick the original rank of the selected pick
            }
            
            const { error } = await supabase
              .from('picks')
              .update({
                rank: newRank,
                updated_at: new Date().toISOString(),
              })
              .eq('id', displacedPick.id);

            if (error) {
              console.error('Supabase update error for displaced pick:', error);
              throw new Error(`Failed to update displaced pick: ${error.message}`);
            }
          }
          
          return true;
        },
        {
          maxRetries: 3,
          onRetry: (attempt, _error) => {
            console.log(`Retrying save pick (${attempt}/3)...`);
            setUpdateMessage(`Connection issue. Retrying save (${attempt}/3)...`);
          }
        }
      );

      // Refresh local picks data
      setUpdateMessage('Refreshing your picks...');
      await fetchPicks();
      
      // Refresh global app store data to ensure consistency across all pages
      setUpdateMessage('Syncing with other pages...');
      
      // Use withRetry for app store updates as well
      await withRetry(
        async () => {
          // This is crucial for keeping Eunggyu Lee's picks in sync everywhere
          await fetchFeedPicks();
          await fetchCurators();
          return true;
        },
        {
          maxRetries: 2,
          onRetry: (attempt, _error) => {
            console.log(`Retrying sync with other pages (${attempt}/2)...`);
            setUpdateMessage(`Syncing with other pages... Retry ${attempt}/2`);
          }
        }
      );
      
      // Show success message
      setUpdateSuccess(true);
      setUpdateMessage('Your pick has been saved!');
      
      // Reset UI state
      setShowModal(false);
      setSelectedPick(null);
      setSelectedCategory(null);
      setSelectedRank(null);
      
      // Hide success message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
        setUpdateSuccess(false);
      }, 3000);
      
    } catch (error) {
      console.error('Error saving pick:', error);
      setUpdateSuccess(false);
      setUpdateMessage(handleSupabaseError(error, 'Error saving pick. Please try again.'));
      
      // Hide error message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
      }, 3000);
    } finally {
      setLoading(false);
      setShowDeleteConfirm(false);
      setPickToDelete(null);
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  // Handle reordering of picks
  const handleReorder = async (category: Category, newOrder: Pick[]) => {
    try {
      // Show update in progress
      setIsUpdating(true);
      setUpdateMessage('Updating your picks...');
      setUpdateSuccess(false);
      
      // Create a copy of the current picks state
      const updatedPicks = { ...picks };
      
      // Update the ranks in our local state first (for immediate UI feedback)
      updatedPicks[category] = updatedPicks[category].map(existingPick => {
        // Find if this pick was reordered
        const updatedPick = newOrder.find(p => p.id === existingPick.id);
        
        // If it was reordered, update its rank
        if (updatedPick && updatedPick.rank !== existingPick.rank) {
          return { ...existingPick, rank: updatedPick.rank };
        }
        
        // Otherwise keep it as is
        return existingPick;
      });
      
      // Update the UI immediately
      setPicks(updatedPicks);
      
      // Use withRetry to handle database updates with retry logic
      await withRetry(
        async () => {
          // Create update promises with retry logic
          const updatePromises = newOrder.map(pick => {
            return supabase
              .from('picks')
              .update({
                rank: pick.rank,
                updated_at: new Date().toISOString(),
              })
              .eq('id', pick.id);
          });
          
          // Wait for all updates to complete
          const results = await Promise.all(updatePromises);
          
          // Check for errors
          const errors = results.filter(result => result.error);
          if (errors.length > 0) {
            throw new Error(`Errors updating picks: ${JSON.stringify(errors)}`);
          }
          
          return true;
        },
        {
          maxRetries: 3,
          onRetry: (attempt, _error) => {
            console.log(`Retrying update picks (${attempt}/3)...`);
            setUpdateMessage(`Connection issue. Retrying update (${attempt}/3)...`);
          }
        }
      );
      
      // Update message to show we're syncing with other pages
      setUpdateMessage('Syncing with other pages...');
      
      // Use withRetry for app store updates as well
      await withRetry(
        async () => {
          // Refresh global app store data to ensure consistency across all pages
          // This is especially important for reordering since it affects the top 3 picks
          await fetchFeedPicks();
          await fetchCurators();
          return true;
        },
        {
          maxRetries: 2,
          onRetry: (attempt, _error) => {
            console.log(`Retrying sync with other pages (${attempt}/2)...`);
            setUpdateMessage(`Syncing with other pages... Retry ${attempt}/2`);
          }
        }
      );
      
      // Show success message
      setUpdateSuccess(true);
      setUpdateMessage('Your picks have been updated!');
      
      // Hide success message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
        setUpdateSuccess(false);
      }, 3000);
      
    } catch (error) {
      console.error('Error reordering picks:', error);
      setUpdateSuccess(false);
      setUpdateMessage(handleSupabaseError(error, 'Error updating picks. Please try again.'));
      
      // Refresh from server to ensure consistency
      try {
        await fetchPicks();
      } catch (fetchError) {
        console.error('Error refreshing picks after failed update:', fetchError);
      }
      
      // Hide error message after 3 seconds
      setTimeout(() => {
        setIsUpdating(false);
      }, 3000);
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handleAddPick = (category: Category, rank: number) => {
    setSelectedCategory(category);
    setSelectedRank(rank);
    setSelectedPick(null);
    setShowModal(true);
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  const handlePickClick = (pick: Pick, category: Category, rank: number) => {
    setSelectedPick(pick);
    setSelectedCategory(category);
    setSelectedRank(rank);
    setShowModal(true);
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  // Helper function to get category display name
  const getCategoryDisplayName = (category: Category): string => {
    switch (category) {
      case 'books': return 'Book';
      case 'products': return 'Product';
      case 'places': return 'Place';
      default: return 'Item';
    }
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  // The SortableItem component has been moved to a separate file to prevent re-renders

  // Memoize the renderGrid function to prevent unnecessary re-renders
  const renderGrid = React.useCallback((category: Category) => {
    // Get all picks for this category
    const categoryPicks = picks[category] || [];
    
    // Determine the first available rank
    const firstAvailableRank = getFirstAvailableRank(category);
    
    // Create an array of sortable items
    const items = Array.from({ length: 9 }).map((_, index) => {
      const rank = index + 1; // Rank is 1-based (1-9)
      const pick = categoryPicks.find(p => p.rank === rank);
      return {
        id: pick ? pick.id : `${category}-${rank}`,
        rank,
        pick
      }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);
    });
    
    // Handle drag end event
    const handleDragEnd = (event: DragEndEvent) => {
      const { active, over } = event;
      
      if (!over || active.id === over.id) return;
      
      // Find the dragged item and the target item
      const activeItem = items.find(item => item.id === active.id);
      const overItem = items.find(item => item.id === over.id);
      
      if (!activeItem || !activeItem.pick) return;
      if (!overItem) return;
      
      // Create updated picks with new ranks
      const updatedPicks: Pick[] = [];
      
      // If we're swapping with another pick
      if (overItem.pick) {
        updatedPicks.push({
          ...activeItem.pick,
          rank: overItem.rank
        });
        
        updatedPicks.push({
          ...overItem.pick,
          rank: activeItem.rank
        });
      } else {
        // We're moving to an empty slot
        updatedPicks.push({
          ...activeItem.pick,
          rank: overItem.rank
        });
      }
      
      // Call the handleReorder function to update the database
      handleReorder(category, updatedPicks);
    }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);
    
    // Set up sensors for drag and drop
    const sensors = useSensors(
      useSensor(PointerSensor, {
        activationConstraint: { distance: 10 }
      }),
      useSensor(TouchSensor, {
        activationConstraint: { delay: 250, tolerance: 5 }
      }),
      useSensor(KeyboardSensor, {
        coordinateGetter: sortableKeyboardCoordinates
      })
    );
    
    return (
      <div className="flex flex-col">
        {/* Counter removed from here as it's now shown next to the category title */}
        
        {/* 3x3 Grid with drag and drop */}
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={handleDragEnd}
        >
          <SortableContext items={items.map(item => item.id)} strategy={rectSortingStrategy}>
            <div className="grid grid-cols-3 gap-[10px]">
              {/* Always render exactly 9 items */}
              {items.map((item) => {
                const rank = item.rank;
                const pick = item.pick;
                // The Add tile should be the first available rank (could be 1-9)
                const isAddTile = !pick && rank === firstAvailableRank;
                const isEmpty = !pick && !isAddTile;
                
                return (
                  <SortableItem
                    key={item.id}
                    id={item.id}
                    pick={pick}
                    category={category}
                    rank={rank}
                    isAddTile={isAddTile}
                    isEmpty={isEmpty}
                    onPickClick={handlePickClick}
                    onAddPick={handleAddPick}
                  />
                );
              })}
            </div>
          </SortableContext>
        </DndContext>
      </div>
    );
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  // Helper function to determine the first available rank for each category
  const getFirstAvailableRank = (category: Category): number => {
    const categoryPicks = picks[category] || [];
    const filledRanks = new Set(categoryPicks.map(p => p.rank).filter(r => r >= 1 && r <= 3));
    
    // Find the first empty rank between 1-3
    for (let i = 1; i <= 3; i++) {
      if (!filledRanks.has(i)) {
        return i;
      }
    }
    
    // If all ranks 1-3 are filled, find the next available rank (4+)
    // This ensures we always have an Add tile, even when the top 3 are filled
    const allRanks = new Set(categoryPicks.map(p => p.rank));
    for (let i = 4; i <= 9; i++) {
      if (!allRanks.has(i)) {
        return i;
      }
    }
    
    // If all ranks 1-9 are filled, return the next rank (10)
    return 10;
  }, [picks, handleAddPick, handlePickClick, handleReorder, getFirstAvailableRank]);

  return (
    <div className="w-full pt-8 pb-24 px-12 relative"> {/* Added 3rem padding (12 = 3rem in Tailwind) */}
      {/* Update Status Notification */}
      {isUpdating && (
        <div 
          className={`fixed bottom-6 left-1/2 transform -translate-x-1/2 py-3 px-6 rounded-full shadow-lg z-50 flex items-center gap-2 transition-all duration-300 ${updateSuccess ? 'bg-green-500 text-white' : 'bg-[#f5ffde] text-[#252525]'}`}
        >
          {!updateSuccess && (
            <svg className="animate-spin h-5 w-5 text-[#252525]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          )}
          {updateSuccess && (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          )}
          <span className="font-medium">{updateMessage}</span>
        </div>
      )}
      
      {/* SubNav moved to App.tsx for consistency */}
      <div className="mt-8">
        <div className="flex flex-col md:flex-row w-full">
          {/* Books Column */}
          <div className="flex-1 pb-8">
            <div className="mb-6 flex items-center justify-between">
              <h2 className="text-xl font-semibold mb-2 text-[#252525] font-mono">Books</h2>
              {/* Counter shows current top picks / required top picks (3) */}
              {/* This is used as an indicator to complete requirements for profile submission */}
              <Label variant="large" className="font-mono">
                {picks['books'].filter(p => [1, 2, 3].includes(p.rank)).length}/3
              </Label>
            </div>
            <p className="text-[#585757] text-sm mb-6">Share your favorite books that have influenced you.</p>
            <div className="w-full">
              {renderGrid('books')}
            </div>
          </div>
          
          {/* Divider between Books and Products */}
          <div className="hidden md:block w-px bg-[#e0e0e0] mx-6"></div>
          
          {/* Products Column */}
          <div className="flex-1 pb-8">
            <div className="mb-6 flex items-center justify-between">
              <h2 className="text-xl font-semibold mb-2 text-[#252525] font-mono">Products</h2>
              {/* Counter shows current top picks / required top picks (3) */}
              <Label variant="large" className="font-mono">
                {picks['products'].filter(p => [1, 2, 3].includes(p.rank)).length}/3
              </Label>
            </div>
            <p className="text-[#585757] text-sm mb-6">Curate your favorite products that you can't live without.</p>
            <div className="w-full">
              {renderGrid('products')}
            </div>
          </div>
          
          {/* Divider between Products and Places */}
          <div className="hidden md:block w-px bg-[#e0e0e0] mx-6"></div>
          
          {/* Places Column */}
          <div className="flex-1 pb-8">
            <div className="mb-6 flex items-center justify-between">
              <h2 className="text-xl font-semibold mb-2 text-[#252525] font-mono">Places</h2>
              {/* Counter shows current top picks / required top picks (3) */}
              <Label variant="large" className="font-mono">
                {picks['places'].filter(p => [1, 2, 3].includes(p.rank)).length}/3
              </Label>
            </div>
            <p className="text-[#585757] text-sm mb-6">Showcase your favorite places that hold special meaning.</p>
            <div className="w-full">
              {renderGrid('places')}
            </div>
          </div>
        </div>
      </div>

      {/* Item Modal */}
      <ItemModal
        isOpen={showModal}
        onClose={() => {
          setShowModal(false);
          setSelectedPick(null);
          setSelectedCategory(null);
          setSelectedRank(null);
        }}
        onSubmit={handleSave}
        onDelete={selectedPick ? () => confirmDelete(selectedPick) : undefined}
        initialData={selectedPick ? {
          title: selectedPick.title || '',
          description: selectedPick.description || '',
          reference: selectedPick.reference || '',
          imageUrl: selectedPick.image_url || '',
          category: selectedCategory || 'books',
          rank: selectedRank || 0
        } : undefined}
      />

      {/* Delete Confirmation Modal */}
      <Transition appear show={showDeleteConfirm} as={React.Fragment}>
        <Dialog
          as="div"
          className="relative z-10"
          onClose={() => setShowDeleteConfirm(false)}
        >
          <Transition.Child
            as={React.Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black bg-opacity-25" />
          </Transition.Child>

          <div className="fixed inset-0 overflow-y-auto">
            <div className="flex min-h-full items-center justify-center p-4 text-center">
              <Transition.Child
                as={React.Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 scale-95"
                enterTo="opacity-100 scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 scale-100"
                leaveTo="opacity-0 scale-95"
              >
                <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                  <Dialog.Title
                    as="h3"
                    className="text-lg font-medium leading-6 text-gray-900"
                  >
                    Delete Pick
                  </Dialog.Title>
                  <div className="mt-2">
                    <p className="text-sm text-gray-500">
                      Are you sure you want to delete this pick? This action cannot be undone.
                    </p>
                  </div>

                  <div className="mt-4 flex justify-end gap-2">
                    <button
                      type="button"
                      className="inline-flex justify-center rounded-md border border-transparent bg-gray-100 px-4 py-2 text-sm font-medium text-gray-900 hover:bg-gray-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-500 focus-visible:ring-offset-2"
                      onClick={() => setShowDeleteConfirm(false)}
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      className="inline-flex justify-center rounded-md border border-transparent bg-red-100 px-4 py-2 text-sm font-medium text-red-900 hover:bg-red-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2"
                      onClick={() => {
                        if (pickToDelete) {
                          handleDelete(pickToDelete);
                        }
                      }}
                    >
                      Delete
                    </button>
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition>
    </div>
  );
}
