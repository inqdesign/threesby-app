import React from 'react';
import { Routes, Route, Link, useLocation, Navigate, useNavigate } from 'react-router-dom';
import './styles/mobile-fixes.css'; // Import mobile-specific CSS optimizations
import { User, ChevronDown, Settings, LogOut } from 'lucide-react';
import { AuthModal } from './components/AuthModal';
import { useAuth } from './hooks/useAuth';
// import { useScrollDirection } from './hooks/useScrollDirection';
import { supabase } from './lib/supabase';
import { useAppStore } from './store';
import { SubNav } from './components/SubNav';
import { ProfileEditModal } from './components/ProfileEditModal';
import { DiscoverPage } from './pages/DiscoverPage';
import { ProfilePage } from './pages/ProfilePage';
import { AccountPage } from './pages/AccountPage';
import { FavoritesPage } from './pages/FavoritesPage';
import { AdminPage } from './pages/AdminPage';
import { InvitesPage } from './pages/admin/InvitesPage';
import { FeaturedPicksPage } from './pages/FeaturedPicksPage';
import { CreatorLandingPage } from './pages/CreatorLandingPage';
import { InviteLandingPage } from './pages/InviteLandingPage';
import { MyThreesPage } from './pages/MyThreesPage';
import { CuratorsPage } from './pages/CuratorsPage';
import { OnboardingPage } from './pages/OnboardingPage';
import { BottomNav } from './components/BottomNav';
import { ScrollToTop } from './components/ScrollToTop';
import LexicalEditorTest from './components/LexicalEditorTest';
import { PickModalWrapper } from './components/PickModalWrapper';
import type { Pick } from './types';

function ProtectedRoute({ children, isAllowed }: { children: React.ReactNode; isAllowed: boolean }) {
  if (!isAllowed) {
    return <Navigate to="/" replace />;
  }
  return <>{children}</>;
}

type Category = 'places' | 'products' | 'books';

// Error Boundary Component
class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean }> {
  state = { hasError: false };

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-red-600 mb-4">Something went wrong</h1>
            <p className="text-gray-600 mb-4">Please try refreshing the page.</p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Refresh
            </button>
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}

function App() {
  const { user, loading: authLoading, isAdmin } = useAuth();
  const [showLoginModal, setShowLoginModal] = React.useState(false);
  const [showSignupModal, setShowSignupModal] = React.useState(false);
  const [showUserMenu, setShowUserMenu] = React.useState(false);
  const [showProfileEditModal, setShowProfileEditModal] = React.useState(false);
  const userMenuRef = React.useRef<HTMLDivElement>(null);
  // Commented out unused variable
  // const isHeaderVisible = useScrollDirection();
  const location = useLocation();
  const navigate = useNavigate();
  const isCreatorLanding = location.pathname === '/creator';
  const isDiscoverPage = location.pathname === '/discover';

  const {
    userProfile,
    userPicks = [], // Default to empty array
    curators,
    loading,
    fetchProfile,
    fetchPicks,
    fetchUserData,
    fetchFeedPicks,
    fetchFeaturedPicks,
    fetchFeaturedCurators,
    fetchCurators,
  } = useAppStore();

  // We can group picks by category if needed in the future
  // Example: const groupedPicks: Record<Category, Pick[]> = React.useMemo(() => ({ ... }), [userPicks]);

  React.useEffect(() => {
    if (user) {
      fetchUserData(user.id);
    }
  }, [user, fetchUserData]);

  React.useEffect(() => {
    // Fetch feed picks on app load
    fetchFeedPicks();
    // Fetch featured picks on app load
    fetchFeaturedPicks();
    // Fetch featured curators on app load
    fetchFeaturedCurators();
    // Fetch curators on app load
    fetchCurators();
  }, [fetchFeedPicks, fetchFeaturedPicks, fetchFeaturedCurators, fetchCurators]);

  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {
        setShowUserMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleSavePick = React.useCallback(
    async (data: Partial<Pick>, selectedCategory: Category | null, selectedPick: Pick | null) => {
      try {
        if (!user) return;

        console.log('Saving pick:', data, 'category:', selectedCategory, 'selectedPick:', selectedPick);

        // If we're updating an existing pick
        if (selectedPick) {
          const { error } = await supabase
            .from('picks')
            .update({
              ...data,
              updated_at: new Date().toISOString(),
              last_updated_at: new Date().toISOString(),
            })
            .eq('id', selectedPick.id);

          if (error) throw error;
          console.log('Updated pick:', selectedPick.id);
        } else {
          // We're creating a new pick
          if (!selectedCategory) {
            console.error('No category selected for new pick');
            return;
          }

          const { error } = await supabase.from('picks').insert([
            {
              ...data,
              category: selectedCategory,
              user_id: user.id,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString(),
              last_updated_at: new Date().toISOString(),
            },
          ]);

          if (error) throw error;
          console.log('Created new pick in category:', selectedCategory);
        }

        // Reload user data to update UI
        await fetchUserData(user.id);
      } catch (error) {
        console.error('Error saving pick:', error);
        alert('Error saving pick. Please try again.');
      }
    },
    [user, fetchUserData]
  );

  const handleDeletePick = React.useCallback(
    async (pick: Pick) => {
      try {
        if (!user) return;

        console.log('Deleting pick:', pick);

        const { error } = await supabase.from('picks').delete().eq('id', pick.id);

        if (error) throw error;

        console.log('Deleted pick:', pick.id);

        // Reload user data to update UI
        await fetchUserData(user.id);
      } catch (error) {
        console.error('Error deleting pick:', error);
        alert('Error deleting pick. Please try again.');
      }
    },
    [user, fetchUserData]
  );

  const handleSubmit = React.useCallback(
    async () => {
      try {
        if (!user) return;
        
        // Check if user profile exists
        if (!userProfile) {
          const { data, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', user.id)
            .single();
          
          if (error) {
            throw error;
          }
          
          if (!data) {
            console.log('Creating new profile for user:', user.id);
            const { error: insertError } = await supabase
              .from('profiles')
              .insert([
                { 
                  id: user.id,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString(),
                  published: false,
                }
              ]);
            
            if (insertError) throw insertError;
          }
        }
        
        // Set profile to published
        const { error } = await supabase
          .from('profiles')
          .update({ 
            published: true,
            updated_at: new Date().toISOString(),
          })
          .eq('id', user.id);
        
        if (error) throw error;
        
        console.log('Profile published for user:', user.id);
        
        // Reload user data to update UI
        await fetchUserData(user.id);
      } catch (error) {
        console.error('Error submitting profile:', error);
        alert('Error publishing profile. Please try again.');
      }
    },
    [user, userProfile, fetchUserData]
  );

  // Create SubNav content based on the current path
  const subNavContent = React.useMemo(() => {
    // Hide SubNav on creator landing and discover page
    if (isCreatorLanding || isDiscoverPage) return null;
    
    // Return the SubNav component with appropriate props
    return (
      <SubNav 
        user={user}
        userProfile={userProfile}
        isAdmin={isAdmin}
        isAuthLoading={authLoading}
        loading={loading}
        onLogin={() => setShowLoginModal(true)}
        onSubmit={handleSubmit}
      />
    );
  }, [user, userProfile, isAdmin, authLoading, loading, isDiscoverPage, handleSubmit]);

  const isActive = (path: string) => {
    if (path === '/my-threes') {
      return location.pathname.startsWith('/my-threes');
    }
    return location.pathname === path;
  };

  return (
    <ErrorBoundary>
      <PickModalWrapper>
        <div className="min-h-screen bg-[#F4F4F4]">
          <ScrollToTop />
          <header
            className={`relative md:fixed w-full top-0 z-50 transition-colors duration-300 ${
              isCreatorLanding ? 'bg-[var(--nav-bg,transparent)]' : 'bg-[#F4F4F4] border-b border-gray-200'
            } hidden md:block`}
          >
            <div className="w-full py-4 px-4 md:px-8 relative">
              <div className="flex justify-between items-center">
                <Link to="/" className="flex items-center gap-2">
                  {/* Logo hidden per request */}
                  <div className="flex flex-col">
                    <span className="text-xl font-bold text-[#252525]">OnShelf</span>
                    <span className="text-sm text-[#9d9b9b]">Curate Your Essence</span>
                  </div>
                </Link>

                <div className="absolute left-1/2 transform -translate-x-1/2 flex items-center gap-4 hidden md:flex">
                  <Link
                    to="/discover"
                    className={`whitespace-nowrap px-4 py-2 rounded-full ${
                      isActive('/discover')
                        ? 'bg-[#252525] text-white'
                        : 'text-[#585757] hover:text-[#252525]'
                    }`}
                  >
                    Discover
                  </Link>
                  <Link
                    to="/curators"
                    className={`whitespace-nowrap px-4 py-2 rounded-full ${
                      isActive('/curators')
                        ? 'bg-[#252525] text-white'
                        : 'text-[#585757] hover:text-[#252525]'
                    }`}
                  >
                    Curators
                  </Link>
                  {user && (
                    <Link
                      to="/my-threes"
                      className={`whitespace-nowrap px-4 py-2 rounded-full ${
                        isActive('/my-threes')
                          ? 'bg-[#252525] text-white'
                          : 'text-[#585757] hover:text-[#252525]'
                      }`}
                    >
                      My Threes
                    </Link>
                  )}
                </div>

                <div className="flex items-center gap-4">
                  {user ? (
                    <div className="relative" ref={userMenuRef}>
                      <button
                        onClick={() => setShowUserMenu(!showUserMenu)}
                        className="flex items-center gap-2 px-4 py-2 rounded-full border border-[#252525] text-[#252525] hover:bg-[#252525] hover:text-white transition-colors"
                      >
                        <span className="hidden md:inline-block">
                          {userProfile?.full_name || user.email?.split('@')[0] || 'Account'}
                        </span>
                        <ChevronDown className="w-4 h-4" />
                      </button>
                      {showUserMenu && (
                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg z-50">
                          <div className="p-2">
                            <Link
                              to="/profile/me"
                              className="flex items-center gap-2 px-4 py-2 text-[#585757] hover:bg-gray-100 rounded-lg"
                              onClick={() => setShowUserMenu(false)}
                            >
                              <User className="w-4 h-4" />
                              <span>Profile</span>
                            </Link>
                            <Link
                              to="/account"
                              className="flex items-center gap-2 px-4 py-2 text-[#585757] hover:bg-gray-100 rounded-lg"
                              onClick={() => setShowUserMenu(false)}
                            >
                              <Settings className="w-4 h-4" />
                              <span>Settings</span>
                            </Link>
                            {isAdmin && (
                              <Link
                                to="/admin"
                                className="flex items-center gap-2 px-4 py-2 text-[#585757] hover:bg-gray-100 rounded-lg"
                                onClick={() => setShowUserMenu(false)}
                              >
                                <Settings className="w-4 h-4" />
                                <span>Admin</span>
                              </Link>
                            )}
                            <button
                              onClick={async () => {
                                setShowUserMenu(false);
                                await supabase.auth.signOut();
                                navigate('/');
                              }}
                              className="w-full flex items-center gap-2 px-4 py-2 text-[#585757] hover:bg-gray-100 rounded-lg"
                            >
                              <LogOut className="w-4 h-4" />
                              <span>Log out</span>
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <>
                      <button
                        onClick={() => setShowLoginModal(true)}
                        className="whitespace-nowrap px-4 py-2 text-[#585757] hover:text-[#252525] hidden md:block"
                      >
                        Log in
                      </button>
                      <button
                        onClick={() => setShowSignupModal(true)}
                        className="whitespace-nowrap px-4 py-2 rounded-full border border-[#252525] text-[#252525] hover:bg-[#252525] hover:text-white transition-colors hidden md:block"
                      >
                        Join now
                      </button>
                    </>
                  )}
                </div>
              </div>
            </div>
          </header>
          <div className={`w-full px-4 md:px-4 ${!isCreatorLanding && 'md:pt-[81px]'}`}>
            {subNavContent}
          </div>
          <div className="w-full px-4 md:px-4">
            <Routes>
              <Route path="/" element={authLoading ? <DiscoverPage /> : <Navigate to="/discover" replace />} />
              <Route path="/discover" element={<DiscoverPage isLoading={authLoading} />} />
              <Route path="/curators" element={<CuratorsPage />} />
              <Route path="/creator" element={<CreatorLandingPage />} />
              <Route path="/onboarding" element={<OnboardingPage />} />
              <Route path="/invite" element={<InviteLandingPage />} />
              <Route path="/profile/:id" element={<ProfilePage />} />
              {/* We don't render anything for /picks/:id - the PickModalWrapper handles this URL */}
              <Route path="/account" element={<ProtectedRoute isAllowed={!!user}><AccountPage /></ProtectedRoute>} />
              <Route
                path="/my-threes"
                element={
                  <ProtectedRoute isAllowed={!!user}>
                    <MyThreesPage 
                      profile={userProfile || undefined}
                      picks={userPicks || undefined}
                      loading={loading}
                      onSavePick={handleSavePick}
                      onDeletePick={handleDeletePick}
                    />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/my-threes/all"
                element={
                  <ProtectedRoute isAllowed={!!user}>
                    <MyThreesPage />
                  </ProtectedRoute>
                }
              />
              <Route path="/picks/new" element={<ProtectedRoute isAllowed={!!user}>
                  <MyThreesPage 
                    profile={userProfile || undefined}
                    picks={userPicks || []}
                    loading={loading}
                    onSavePick={handleSavePick}
                    onDeletePick={handleDeletePick}
                  />
                </ProtectedRoute>} />
              <Route path="/picks/:id/edit" element={<ProtectedRoute isAllowed={!!user}>
                  <MyThreesPage 
                    profile={userProfile || undefined}
                    picks={userPicks || []}
                    loading={loading}
                    onSavePick={handleSavePick}
                    onDeletePick={handleDeletePick}
                  />
                </ProtectedRoute>} />
              <Route path="/favorites" element={<ProtectedRoute isAllowed={!!user}><FavoritesPage /></ProtectedRoute>} />
              <Route path="/featured" element={<FeaturedPicksPage />} />
              <Route path="/admin" element={<ProtectedRoute isAllowed={!!user && isAdmin}><AdminPage /></ProtectedRoute>} />
              <Route path="/admin/invites" element={<ProtectedRoute isAllowed={!!user && isAdmin}><InvitesPage /></ProtectedRoute>} />
              <Route path="/lexical-test" element={<LexicalEditorTest />} />
              <Route path="*" element={<Navigate to="/discover" replace />} />
            </Routes>
          </div>
          <BottomNav 
            setShowLoginModal={setShowLoginModal}
          />
        </div>
      </PickModalWrapper>
      
      {/* Auth modals */}
      <AuthModal
        isOpen={showLoginModal}
        onClose={() => setShowLoginModal(false)}
        mode="login"
        onModeChange={() => {
          setShowLoginModal(false);
          setShowSignupModal(true);
        }}
      />
      <AuthModal
        isOpen={showSignupModal}
        onClose={() => setShowSignupModal(false)}
        mode="signup"
        onModeChange={() => {
          setShowSignupModal(false);
          setShowLoginModal(true);
        }}
      />
      
      {/* Profile edit modal */}
      {userProfile && (
        <ProfileEditModal
          isOpen={showProfileEditModal}
          onClose={() => setShowProfileEditModal(false)}
          profile={userProfile}
          onSave={async () => {
            await fetchUserData(user!.id);
            setShowProfileEditModal(false);
          }}
        />
      )}
    </ErrorBoundary>
  );
}

export default App;
