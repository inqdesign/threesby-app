/*
  # Fix Curator Invites Auto-Generation System
  
  1. Make full_name optional (not required for generic codes)
  2. Add automatic code generation on INSERT
  3. Fix admin invitation creation to auto-generate codes
  4. Update existing NULL codes with generated values
*/

-- First, make full_name optional
ALTER TABLE public.curator_invites 
ALTER COLUMN full_name DROP NOT NULL;

-- Create function to generate unique invite codes (if not exists)
CREATE OR REPLACE FUNCTION generate_unique_invite_code()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_code text;
  code_exists boolean;
BEGIN
  LOOP
    -- Generate a random 8-character alphanumeric code
    new_code := upper(encode(gen_random_bytes(4), 'hex'));
    
    -- Check if code already exists
    SELECT EXISTS(
      SELECT 1 FROM curator_invites WHERE code = new_code
    ) INTO code_exists;
    
    -- Exit loop if code is unique
    EXIT WHEN NOT code_exists;
  END LOOP;
  
  RETURN new_code;
END;
$$;

-- Grant execute permission on the function
GRANT EXECUTE ON FUNCTION generate_unique_invite_code TO authenticated;

-- Create trigger function to auto-generate codes on INSERT
CREATE OR REPLACE FUNCTION auto_generate_invite_code()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- If no code is provided, generate one automatically
  IF NEW.code IS NULL OR NEW.code = '' THEN
    NEW.code := generate_unique_invite_code();
  END IF;
  
  RETURN NEW;
END;
$$;

-- Create trigger for auto-generating codes
DROP TRIGGER IF EXISTS auto_generate_invite_code_trigger ON public.curator_invites;
CREATE TRIGGER auto_generate_invite_code_trigger
  BEFORE INSERT ON public.curator_invites
  FOR EACH ROW
  EXECUTE FUNCTION auto_generate_invite_code();

-- Update existing records with NULL codes
UPDATE public.curator_invites 
SET code = generate_unique_invite_code()
WHERE code IS NULL;

-- Now make code NOT NULL since it will always be auto-generated
ALTER TABLE public.curator_invites 
ALTER COLUMN code SET NOT NULL;

-- Update the generate_curator_invites function to not require full_name
CREATE OR REPLACE FUNCTION generate_curator_invites(curator_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  i integer;
  curator_name text;
BEGIN
  -- Get curator name for reference
  SELECT full_name INTO curator_name
  FROM profiles 
  WHERE id = curator_id;
  
  -- Generate 3 invitation codes for the curator
  FOR i IN 1..3 LOOP
    -- Insert the invitation (code will be auto-generated by trigger)
    INSERT INTO public.curator_invites (
      full_name,
      expires_at,
      created_by,
      status
    ) VALUES (
      COALESCE(curator_name, 'Curator') || ' - Invite ' || i,
      now() + interval '30 days', -- 30 days expiration for curator invites
      curator_id,
      'pending'
    );
  END LOOP;
END;
$$;

-- Grant execute permission on the updated function
GRANT EXECUTE ON FUNCTION generate_curator_invites TO authenticated;

-- Update admin invite creation to be simpler (code auto-generated, full_name optional)
COMMENT ON TABLE public.curator_invites IS 'Invitation codes for curators. Codes are auto-generated, full_name is optional and can be added later when invitation is used.';
COMMENT ON COLUMN public.curator_invites.code IS 'Auto-generated unique invitation code';
COMMENT ON COLUMN public.curator_invites.full_name IS 'Optional name for the invitation - can be generic or specific person'; 