import React, { useState, useEffect } from 'react';
import { Mail, Key, User, AlertCircle, Check, ArrowLeft, LogOut } from 'lucide-react';
import { useAuth } from '../hooks/useAuth';
import { supabase } from '../lib/supabase';
import { useNavigate } from 'react-router-dom';
import { useAppStore } from '../store';
import { ImageUpload } from '../components/ImageUpload';
import { uploadImage } from '../lib/supabase';

export function AccountPage() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { userProfile, fetchProfile } = useAppStore();
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
  const [activeTab, setActiveTab] = useState<'profile' | 'security' | 'notifications'>('profile');
  
  // Profile form state with type safety
  const [profileForm, setProfileForm] = useState({
    full_name: userProfile?.full_name || '',
    title: userProfile?.title || '',
    bio: (userProfile as any)?.bio || '',
    avatar_url: userProfile?.avatar_url || '',
    social_links: {
      twitter: userProfile?.social_links?.twitter || '',
      instagram: userProfile?.social_links?.instagram || '',
      website: userProfile?.social_links?.website || ''
    }
  });
  
  // Security form state
  const [securityForm, setSecurityForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  
  // Notification settings with type safety
  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: (userProfile as any)?.settings?.emailNotifications || false,
    newFollowers: (userProfile as any)?.settings?.newFollowers || false,
    pickLikes: (userProfile as any)?.settings?.pickLikes || false,
    comments: (userProfile as any)?.settings?.comments || false
  });
  
  // Image upload state
  const [uploading, setUploading] = useState(false);

  // Update profile form when userProfile changes
  useEffect(() => {
    if (userProfile) {
      setProfileForm({
        full_name: userProfile.full_name || '',
        title: userProfile.title || '',
        bio: (userProfile as any).bio || '',
        avatar_url: userProfile.avatar_url || '',
        social_links: {
          twitter: userProfile.social_links?.twitter || '',
          instagram: userProfile.social_links?.instagram || '',
          website: userProfile.social_links?.website || ''
        }
      });
      
      // Safely access settings with optional chaining and type assertion
      const settings = (userProfile as any).settings || {};
      setNotificationSettings({
        emailNotifications: settings.emailNotifications || false,
        newFollowers: settings.newFollowers || false,
        pickLikes: settings.pickLikes || false,
        comments: settings.comments || false
      });
    }
  }, [userProfile]);
  
  // Fetch profile data when component mounts
  useEffect(() => {
    if (user?.id) {
      fetchProfile(user.id);
    }
  }, [user, fetchProfile]);

  // Handle profile image upload
  const handleImageUpload = async (file: File) => {
    if (!user) return;
    
    setUploading(true);
    try {
      const imageUrl = await uploadImage(file, user.id);
      setProfileForm(prev => ({
        ...prev,
        avatar_url: imageUrl
      }));
    } catch (error) {
      console.error('Error uploading image:', error);
      setMessage({ type: 'error', text: 'Error uploading image' });
    } finally {
      setUploading(false);
    }
  };
  
  // Update profile information
  const updateProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;
    
    setLoading(true);
    try {
      // Create a profile update object with proper types
      const profileUpdate = {
        full_name: profileForm.full_name,
        title: profileForm.title,
        bio: profileForm.bio,
        avatar_url: profileForm.avatar_url,
        social_links: profileForm.social_links,
        updated_at: new Date().toISOString()
      };
      
      const { error } = await supabase
        .from('profiles')
        .update(profileUpdate)
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Profile updated successfully' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating profile:', error);
      setMessage({ type: 'error', text: 'Error updating profile' });
    } finally {
      setLoading(false);
    }
  };
  
  // Update password
  const updatePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    if (securityForm.newPassword !== securityForm.confirmPassword) {
      setMessage({ type: 'error', text: 'New passwords do not match' });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase.auth.updateUser({
        password: securityForm.newPassword
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Password updated successfully' });
      setSecurityForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      console.error('Error updating password:', error);
      setMessage({ type: 'error', text: 'Error updating password' });
    } finally {
      setLoading(false);
    }
  };

  // Update notification settings
  const updateNotificationSettings = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      // Create settings object with proper type
      const settings = {
        emailNotifications: notificationSettings.emailNotifications,
        newFollowers: notificationSettings.newFollowers,
        pickLikes: notificationSettings.pickLikes,
        comments: notificationSettings.comments
      };
      
      const { error } = await supabase
        .from('profiles')
        .update({
          settings,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Notification settings updated' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating notification settings:', error);
      setMessage({ type: 'error', text: 'Error updating notification settings' });
    } finally {
      setLoading(false);
    }
  };
  
  // Send verification email
  const sendVerificationEmail = async () => {
    if (!user?.email) return;

    setLoading(true);
    try {
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: user.email
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Verification email sent' });
    } catch (error) {
      console.error('Error sending verification email:', error);
      setMessage({ type: 'error', text: 'Error sending verification email' });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle logout
  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      window.location.href = '/discover';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  // Update profile form when userProfile changes
  useEffect(() => {
    if (userProfile) {
      setProfileForm({
        full_name: userProfile.full_name || '',
        title: userProfile.title || '',
        bio: (userProfile as any).bio || '',
        avatar_url: userProfile.avatar_url || '',
        social_links: {
          twitter: userProfile.social_links?.twitter || '',
          instagram: userProfile.social_links?.instagram || '',
          website: userProfile.social_links?.website || ''
        }
      });
      
      // Safely access settings with optional chaining and type assertion
      const settings = (userProfile as any).settings || {};
      setNotificationSettings({
        emailNotifications: settings.emailNotifications || false,
        newFollowers: settings.newFollowers || false,
        pickLikes: settings.pickLikes || false,
        comments: settings.comments || false
      });
    }
  }, [userProfile]);
  
  // Fetch profile data when component mounts
  useEffect(() => {
    if (user?.id) {
      fetchProfile(user.id);
    }
  }, [user, fetchProfile]);

  // Handle profile image upload
  const handleImageUpload = async (file: File) => {
    if (!user) return;
    
    setUploading(true);
    try {
      const imageUrl = await uploadImage(file, user.id);
      setProfileForm(prev => ({
        ...prev,
        avatar_url: imageUrl
      }));
    } catch (error) {
      console.error('Error uploading image:', error);
      setMessage({ type: 'error', text: 'Error uploading image' });
    } finally {
      setUploading(false);
    }
  };
  
  // Update profile information
  const updateProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;
    
    setLoading(true);
    try {
      // Create a profile update object with proper types
      const profileUpdate = {
        full_name: profileForm.full_name,
        title: profileForm.title,
        bio: profileForm.bio,
        avatar_url: profileForm.avatar_url,
        social_links: profileForm.social_links,
        updated_at: new Date().toISOString()
      };
      
      const { error } = await supabase
        .from('profiles')
        .update(profileUpdate)
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Profile updated successfully' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating profile:', error);
      setMessage({ type: 'error', text: 'Error updating profile' });
    } finally {
      setLoading(false);
    }
  };
  
  // Update password
  const updatePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    if (securityForm.newPassword !== securityForm.confirmPassword) {
      setMessage({ type: 'error', text: 'New passwords do not match' });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase.auth.updateUser({
        password: securityForm.newPassword
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Password updated successfully' });
      setSecurityForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      console.error('Error updating password:', error);
      setMessage({ type: 'error', text: 'Error updating password' });
    } finally {
      setLoading(false);
    }
  };

  // Update notification settings
  const updateNotificationSettings = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      // Create settings object with proper type
      const settings = {
        emailNotifications: notificationSettings.emailNotifications,
        newFollowers: notificationSettings.newFollowers,
        pickLikes: notificationSettings.pickLikes,
        comments: notificationSettings.comments
      };
      
      const { error } = await supabase
        .from('profiles')
        .update({
          settings,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Notification settings updated' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating notification settings:', error);
      setMessage({ type: 'error', text: 'Error updating notification settings' });
    } finally {
      setLoading(false);
    }
  };
  
  // Send verification email
  const sendVerificationEmail = async () => {
    if (!user?.email) return;

    setLoading(true);
    try {
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: user.email
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Verification email sent' });
    } catch (error) {
      console.error('Error sending verification email:', error);
      setMessage({ type: 'error', text: 'Error sending verification email' });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle logout
  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      window.location.href = '/discover';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };
  
  // Update profile form when userProfile changes
  useEffect(() => {
    if (userProfile) {
      setProfileForm({
        full_name: userProfile.full_name || '',
        title: userProfile.title || '',
        bio: (userProfile as any).bio || '',
        avatar_url: userProfile.avatar_url || '',
        social_links: {
          twitter: userProfile.social_links?.twitter || '',
          instagram: userProfile.social_links?.instagram || '',
          website: userProfile.social_links?.website || ''
        }
      });
      
      // Safely access settings with optional chaining and type assertion
      const settings = (userProfile as any).settings || {};
      setNotificationSettings({
        emailNotifications: settings.emailNotifications || false,
        newFollowers: settings.newFollowers || false,
        pickLikes: settings.pickLikes || false,
        comments: settings.comments || false
      });
    }
  }, [userProfile]);
  
  // Fetch profile data when component mounts
  useEffect(() => {
    if (user?.id) {
      fetchProfile(user.id);
    }
  }, [user, fetchProfile]);

  // Handle profile image upload
  const handleImageUpload = async (file: File) => {
    if (!user) return;
    
    setUploading(true);
    try {
      const imageUrl = await uploadImage(file, user.id);
      setProfileForm(prev => ({
        ...prev,
        avatar_url: imageUrl
      }));
    } catch (error) {
      console.error('Error uploading image:', error);
      setMessage({ type: 'error', text: 'Error uploading image' });
    } finally {
      setUploading(false);
    }
  };
  
  // Update profile information
  const updateProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;
    
    setLoading(true);
    try {
      // Create a profile update object with proper types
      const profileUpdate = {
        full_name: profileForm.full_name,
        title: profileForm.title,
        bio: profileForm.bio,
        avatar_url: profileForm.avatar_url,
        social_links: profileForm.social_links,
        updated_at: new Date().toISOString()
      };
      
      const { error } = await supabase
        .from('profiles')
        .update(profileUpdate)
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Profile updated successfully' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating profile:', error);
      setMessage({ type: 'error', text: 'Error updating profile' });
    } finally {
      setLoading(false);
    }
  };
  
  // Update password
  const updatePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    if (securityForm.newPassword !== securityForm.confirmPassword) {
      setMessage({ type: 'error', text: 'New passwords do not match' });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase.auth.updateUser({
        password: securityForm.newPassword
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Password updated successfully' });
      setSecurityForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      console.error('Error updating password:', error);
      setMessage({ type: 'error', text: 'Error updating password' });
    } finally {
      setLoading(false);
    }
  };

  // Update notification settings
  const updateNotificationSettings = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      // Create settings object with proper type
      const settings = {
        emailNotifications: notificationSettings.emailNotifications,
        newFollowers: notificationSettings.newFollowers,
        pickLikes: notificationSettings.pickLikes,
        comments: notificationSettings.comments
      };
      
      const { error } = await supabase
        .from('profiles')
        .update({
          settings,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Notification settings updated' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating notification settings:', error);
      setMessage({ type: 'error', text: 'Error updating notification settings' });
    } finally {
      setLoading(false);
    }
  };
  
  // Send verification email
  const sendVerificationEmail = async () => {
    if (!user?.email) return;

    setLoading(true);
    try {
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: user.email
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Verification email sent' });
    } catch (error) {
      console.error('Error sending verification email:', error);
      setMessage({ type: 'error', text: 'Error sending verification email' });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle logout
  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      window.location.href = '/discover';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <div className="flex items-center mb-6">
        <button 
          onClick={() => navigate(-1)}
          className="mr-4 p-2 rounded-full hover:bg-gray-100 transition-colors"
          aria-label="Go back"
        >
          <ArrowLeft className="w-5 h-5 text-gray-600" />
        </button>
        <h1 className="text-2xl font-medium text-[#252525]">Account Settings</h1>
      </div>
      
      {message && (
        <div
          className={`mb-6 p-4 rounded-lg ${
            message.type === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
          }`}
        >
          <div className="flex items-center gap-2">
            {message.type === 'success' ? (
              <Check className="w-5 h-5" />
            ) : (
              <AlertCircle className="w-5 h-5" />
            )}
            <p>{message.text}</p>
          </div>
        </div>
      )}
      
      {/* Tabs */}
      <div className="flex border-b border-gray-200 mb-6">
        <button
          onClick={() => setActiveTab('profile')}
          className={`px-4 py-2 font-medium text-sm ${activeTab === 'profile' ? 'text-[#252525] border-b-2 border-[#252525]' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Profile
        </button>
        <button
          onClick={() => setActiveTab('security')}
          className={`px-4 py-2 font-medium text-sm ${activeTab === 'security' ? 'text-[#252525] border-b-2 border-[#252525]' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Security
        </button>
        <button
          onClick={() => setActiveTab('notifications')}
          className={`px-4 py-2 font-medium text-sm ${activeTab === 'notifications' ? 'text-[#252525] border-b-2 border-[#252525]' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Notifications
        </button>
      </div>
  
  // Update profile form when userProfile changes
  useEffect(() => {
    if (userProfile) {
      setProfileForm({
        full_name: userProfile.full_name || '',
        title: userProfile.title || '',
        bio: (userProfile as any).bio || '',
        avatar_url: userProfile.avatar_url || '',
        social_links: {
          twitter: userProfile.social_links?.twitter || '',
          instagram: userProfile.social_links?.instagram || '',
          website: userProfile.social_links?.website || ''
        }
      });
      
      // Safely access settings with optional chaining and type assertion
      const settings = (userProfile as any).settings || {};
      setNotificationSettings({
        emailNotifications: settings.emailNotifications || false,
        newFollowers: settings.newFollowers || false,
        pickLikes: settings.pickLikes || false,
        comments: settings.comments || false
      });
    }
  }, [userProfile]);
  
  // Fetch profile data when component mounts
  useEffect(() => {
    if (user?.id) {
      fetchProfile(user.id);
    }
  }, [user, fetchProfile]);

  // Handle profile image upload
  const handleImageUpload = async (file: File) => {
    if (!user) return;
    
    setUploading(true);
    try {
      const imageUrl = await uploadImage(file, user.id);
      setProfileForm(prev => ({
        ...prev,
        avatar_url: imageUrl
      }));
    } catch (error) {
      console.error('Error uploading image:', error);
      setMessage({ type: 'error', text: 'Error uploading image' });
    } finally {
      setUploading(false);
    }
  };
  
  // Update profile information
  const updateProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;
    
    setLoading(true);
    try {
      // Create a profile update object with proper types
      const profileUpdate = {
        full_name: profileForm.full_name,
        title: profileForm.title,
        bio: profileForm.bio,
        avatar_url: profileForm.avatar_url,
        social_links: profileForm.social_links,
        updated_at: new Date().toISOString()
      };
      
      const { error } = await supabase
        .from('profiles')
        .update(profileUpdate)
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Profile updated successfully' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating profile:', error);
      setMessage({ type: 'error', text: 'Error updating profile' });
    } finally {
      setLoading(false);
    }
  };
  
  // Update password
  const updatePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    if (securityForm.newPassword !== securityForm.confirmPassword) {
      setMessage({ type: 'error', text: 'New passwords do not match' });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase.auth.updateUser({
        password: securityForm.newPassword
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Password updated successfully' });
      setSecurityForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      console.error('Error updating password:', error);
      setMessage({ type: 'error', text: 'Error updating password' });
    } finally {
      setLoading(false);
    }
  };

  // Update notification settings
  const updateNotificationSettings = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      // Create settings object with proper type
      const settings = {
        emailNotifications: notificationSettings.emailNotifications,
        newFollowers: notificationSettings.newFollowers,
        pickLikes: notificationSettings.pickLikes,
        comments: notificationSettings.comments
      };
      
      const { error } = await supabase
        .from('profiles')
        .update({
          settings,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);
      
      if (error) throw error;
      
      setMessage({ type: 'success', text: 'Notification settings updated' });
      fetchProfile(user.id);
    } catch (error) {
      console.error('Error updating notification settings:', error);
      setMessage({ type: 'error', text: 'Error updating notification settings' });
    } finally {
      setLoading(false);
    }
  };
  
  // Send verification email
  const sendVerificationEmail = async () => {
    if (!user?.email) return;

    setLoading(true);
    try {
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: user.email
      });

      if (error) throw error;

      setMessage({ type: 'success', text: 'Verification email sent' });
    } catch (error) {
      console.error('Error sending verification email:', error);
      setMessage({ type: 'error', text: 'Error sending verification email' });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle logout
  const handleLogout = async () => {
    try {
      await supabase.auth.signOut();
      window.location.href = '/discover';
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <div className="flex items-center mb-6">
        <button 
          onClick={() => navigate(-1)}
          className="mr-4 p-2 rounded-full hover:bg-gray-100 transition-colors"
          aria-label="Go back"
        >
          <ArrowLeft className="w-5 h-5 text-gray-600" />
        </button>
        <h1 className="text-2xl font-medium text-[#252525]">Account Settings</h1>
      </div>
      
      {message && (
        <div
          className={`mb-6 p-4 rounded-lg ${
            message.type === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
          }`}
        >
          <div className="flex items-center gap-2">
            {message.type === 'success' ? (
              <Check className="w-5 h-5" />
            ) : (
              <AlertCircle className="w-5 h-5" />
            )}
            <p>{message.text}</p>
          </div>
        </div>
      )}
      
      {/* Tabs */}
      <div className="flex border-b border-gray-200 mb-6">
        <button
          onClick={() => setActiveTab('profile')}
          className={`px-4 py-2 font-medium text-sm ${activeTab === 'profile' ? 'text-[#252525] border-b-2 border-[#252525]' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Profile
        </button>
        <button
          onClick={() => setActiveTab('security')}
          className={`px-4 py-2 font-medium text-sm ${activeTab === 'security' ? 'text-[#252525] border-b-2 border-[#252525]' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Security
        </button>
        <button
          onClick={() => setActiveTab('notifications')}
          className={`px-4 py-2 font-medium text-sm ${activeTab === 'notifications' ? 'text-[#252525] border-b-2 border-[#252525]' : 'text-gray-500 hover:text-gray-700'}`}
        >
          Notifications
        </button>
      </div>

      <div>
        {/* Profile Tab */}
        {activeTab === 'profile' && (
          <div className="space-y-6">
            <form onSubmit={updateProfile} className="bg-white rounded-lg p-6 border border-gray-200">
              <h2 className="text-xl font-medium text-[#252525] mb-6">Profile Information</h2>
              
              {/* Profile Image */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-[#585757] mb-2">Profile Image</label>
                <div className="relative w-full h-64 flex items-start gap-4 bg-gray-100 p-4 rounded-lg">
                  <div className="flex flex-col items-start">
                    <div className="relative w-24 h-24 rounded-full overflow-hidden bg-gray-100 mb-2">
                      {profileForm.avatar_url ? (
                        <img 
                          src={profileForm.avatar_url} 
                          alt="Profile" 
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gray-200">
                          <User className="w-10 h-10 text-gray-500" />
                        </div>
                      )}
                    </div>
                    <div>
                      <ImageUpload
                        onImageSelected={handleImageUpload}
                        className="px-4 py-2 text-sm hover:bg-gray-200 transition-colors"
                        buttonText="Change Image"
                        loading={uploading}
                      />
                      <p className="text-xs text-gray-500 mt-1">JPG, PNG or GIF. 5MB max.</p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Full Name */}
              <div className="mb-6">
                <label htmlFor="fullName" className="block text-sm font-medium text-[#585757] mb-2">
                  Full Name
                </label>
                <input
                  type="text"
                  id="fullName"
                  value={profileForm.full_name}
                  onChange={(e) => setProfileForm({...profileForm, full_name: e.target.value})}
                  className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3"
                  placeholder="Your full name"
                />
              </div>
              
              {/* Title/Role */}
              <div className="mb-6">
                <label htmlFor="title" className="block text-sm font-medium text-[#585757] mb-2">
                  Title/Role
                </label>
                <input
                  type="text"
                  id="title"
                  value={profileForm.title}
                  onChange={(e) => setProfileForm({...profileForm, title: e.target.value})}
                  className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3"
                  placeholder="e.g. Designer, Writer, Photographer"
                />
              </div>
              
              {/* Bio */}
              <div className="mb-6">
                <label htmlFor="bio" className="block text-sm font-medium text-[#585757] mb-2">
                  Bio
                </label>
                <textarea
                  id="bio"
                  value={profileForm.bio}
                  onChange={(e) => setProfileForm({...profileForm, bio: e.target.value})}
                  rows={3}
                  className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3"
                  placeholder="Tell us about yourself"
                />
              </div>
              
              {/* Social Links */}
              <div className="mb-6">
                <h3 className="text-md font-medium text-[#585757] mb-4">Social Links</h3>
                
                {/* Twitter */}
                <div className="mb-4">
                  <label htmlFor="twitter" className="block text-sm font-medium text-[#585757] mb-2">
                    Twitter
                  </label>
                  <input
                    type="url"
                    id="twitter"
                    value={profileForm.social_links.twitter}
                    onChange={(e) => setProfileForm({
                      ...profileForm,
                      social_links: {
                        ...profileForm.social_links,
                        twitter: e.target.value
                      }
                    })}
                    className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3"
                    placeholder="https://x.com/username"
                  />
                </div>
                
                {/* Instagram */}
                <div className="mb-4">
                  <label htmlFor="instagram" className="block text-sm font-medium text-[#585757] mb-2">
                    Instagram
                  </label>
                  <input
                    type="url"
                    id="instagram"
                    value={profileForm.social_links.instagram}
                    onChange={(e) => setProfileForm({
                      ...profileForm,
                      social_links: {
                        ...profileForm.social_links,
                        instagram: e.target.value
                      }
                    })}
                    className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3"
                    placeholder="https://instagram.com/username"
                  />
                </div>
                
                {/* Website */}
                <div className="mb-4">
                  <label htmlFor="website" className="block text-sm font-medium text-[#585757] mb-2">
                    Website
                  </label>
                  <input
                    type="url"
                    id="website"
                    value={profileForm.social_links.website}
                    onChange={(e) => setProfileForm({
                      ...profileForm,
                      social_links: {
                        ...profileForm.social_links,
                        website: e.target.value
                      }
                    })}
                    className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3"
                    placeholder="https://yourwebsite.com"
                  />
                </div>
              </div>
              
              {/* Save Button */}
              <div className="flex justify-end">
                <button
                  type="submit"
                  disabled={loading}
                  className="px-3 py-1.5 bg-[#252525] text-white rounded-md hover:bg-[#111111] transition-colors disabled:opacity-50 text-sm"
                >
                  {loading ? 'Saving...' : 'Save Changes'}
                </button>
              </div>
            </form>
          </div>
        )}
        
        {/* Security Tab */}
        {activeTab === 'security' && (
          <div className="space-y-6">
            {/* Email Section */}
            <section className="bg-white rounded-lg p-6 border border-gray-200">
              <h2 className="text-xl font-medium text-[#252525] mb-4">Email Address</h2>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Mail className="w-5 h-5 text-gray-400" />
                  <span>{user?.email}</span>
                </div>
                <button
                  onClick={sendVerificationEmail}
                  </div>
                  {user?.email_confirmed_at ? (
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      <Check className="w-3 h-3 mr-1" />
                      Verified
                    </span>
                  ) : (
                    <button
                      type="button"
                      onClick={sendVerificationEmail}
                      disabled={loading}
                      className="text-sm text-blue-600 hover:text-blue-800 transition-colors disabled:opacity-50"
                    >
                      Send Verification Email
                    </button>
                  )}
                </div>
              </div>
              
              {/* Current Password */}
              <div className="mb-6">
                <label htmlFor="currentPassword" className="block text-sm font-medium text-[#585757] mb-2">
                  Current Password
                </label>
                <div className="relative">
                  <input
                    type="password"
                    id="currentPassword"
                    value={securityForm.currentPassword}
                    onChange={(e) => setSecurityForm({...securityForm, currentPassword: e.target.value})}
                    className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3 pl-10"
                    placeholder="Enter your current password"
                    required
                  />
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Key className="h-5 w-5 text-gray-400" />
                  </div>
                </div>
              </div>
              
              {/* New Password */}
              <div className="mb-6">
                <label htmlFor="newPassword" className="block text-sm font-medium text-[#585757] mb-2">
                  New Password
                </label>
                <div className="relative">
                  <input
                    type="password"
                    id="newPassword"
                    value={securityForm.newPassword}
                    onChange={(e) => setSecurityForm({...securityForm, newPassword: e.target.value})}
                    className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3 pl-10"
                    placeholder="Enter new password"
                    required
                  />
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Key className="h-5 w-5 text-gray-400" />
                  </div>
                </div>
              </div>
              
              {/* Confirm New Password */}
              <div className="mb-6">
                <label htmlFor="confirmPassword" className="block text-sm font-medium text-[#585757] mb-2">
                  Confirm New Password
                </label>
                <div className="relative">
                  <input
                    type="password"
                    id="confirmPassword"
                    value={securityForm.confirmPassword}
                    onChange={(e) => setSecurityForm({...securityForm, confirmPassword: e.target.value})}
                    className="w-full rounded-lg bg-gray-100 border-0 shadow-none focus:ring-0 p-3 pl-10"
                    placeholder="Confirm new password"
                    required
                  />
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Key className="h-5 w-5 text-gray-400" />
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end">
                <button
                  type="submit"
                  disabled={loading}
                  className="px-3 py-1.5 bg-[#252525] text-white rounded-md hover:bg-[#111111] transition-colors disabled:opacity-50 text-sm"
                >
                  {loading ? 'Updating...' : 'Update Password'}
                </button>
              </div>
            </form>
          </div>
        )}
        
        {/* Notifications Tab */}
        {activeTab === 'notifications' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg p-6 border border-gray-200">
              <h2 className="text-xl font-medium text-[#252525] mb-6">Notification Preferences</h2>
              
              <div className="space-y-4">
                {/* Email Notifications */}
                <div className="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                  <div>
                    <h3 className="text-sm font-medium text-[#585757]">Email Notifications</h3>
                    <p className="text-sm text-gray-500">Receive email notifications</p>
                  </div>
                  <div className="relative inline-block w-10 mr-2 align-middle select-none">
                    <input
                      type="checkbox"
                      id="emailNotifications"
                      checked={notificationSettings.emailNotifications}
                      onChange={(e) => setNotificationSettings({...notificationSettings, emailNotifications: e.target.checked})}
                      className="sr-only"
                    />
                    <label
                      htmlFor="emailNotifications"
                      className={`block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer ${notificationSettings.emailNotifications ? '!bg-[#252525]' : ''}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform ${notificationSettings.emailNotifications ? 'translate-x-4' : 'translate-x-0'}`}
                      />
                    </label>
                  </div>
                </div>
                
                {/* New Followers */}
                <div className="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                  <div>
                    <h3 className="text-sm font-medium text-[#585757]">New Followers</h3>
                    <p className="text-sm text-gray-500">Get notified when someone follows you</p>
                  </div>
                  <div className="relative inline-block w-10 mr-2 align-middle select-none">
                    <input
                      type="checkbox"
                      id="newFollowers"
                      checked={notificationSettings.newFollowers}
                      onChange={(e) => setNotificationSettings({...notificationSettings, newFollowers: e.target.checked})}
                      className="sr-only"
                    />
                    <label
                      htmlFor="newFollowers"
                      className={`block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer ${notificationSettings.newFollowers ? '!bg-[#252525]' : ''}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform ${notificationSettings.newFollowers ? 'translate-x-4' : 'translate-x-0'}`}
                      />
                    </label>
                  </div>
                </div>
                
                {/* Pick Likes */}
                <div className="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                  <div>
                    <h3 className="text-sm font-medium text-[#585757]">Pick Likes</h3>
                    <p className="text-sm text-gray-500">Get notified when someone likes your picks</p>
                  </div>
                  <div className="relative inline-block w-10 mr-2 align-middle select-none">
                    <input
                      type="checkbox"
                      id="pickLikes"
                      checked={notificationSettings.pickLikes}
                      onChange={(e) => setNotificationSettings({...notificationSettings, pickLikes: e.target.checked})}
                      className="sr-only"
                    />
                    <label
                      htmlFor="pickLikes"
                      className={`block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer ${notificationSettings.pickLikes ? '!bg-[#252525]' : ''}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform ${notificationSettings.pickLikes ? 'translate-x-4' : 'translate-x-0'}`}
                      />
                    </label>
                  </div>
                </div>
                
                {/* Comments */}
                <div className="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                  <div>
                    <h3 className="text-sm font-medium text-[#585757]">Comments</h3>
                    <p className="text-sm text-gray-500">Get notified when someone comments on your picks</p>
                  </div>
                  <div className="relative inline-block w-10 mr-2 align-middle select-none">
                    <input
                      type="checkbox"
                      id="comments"
                      checked={notificationSettings.comments}
                      onChange={(e) => setNotificationSettings({...notificationSettings, comments: e.target.checked})}
                      className="sr-only"
                    />
                    <label
                      htmlFor="comments"
                      className={`block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer ${notificationSettings.comments ? '!bg-[#252525]' : ''}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform ${notificationSettings.comments ? 'translate-x-4' : 'translate-x-0'}`}
                      />
                    </label>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end mt-6">
                <button
                  type="button"
                  onClick={updateNotificationSettings}
                  disabled={loading}
                  className="px-3 py-1.5 bg-[#252525] text-white rounded-md hover:bg-[#111111] transition-colors disabled:opacity-50 text-sm"
                >
                  {loading ? 'Saving...' : 'Save Preferences'}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );