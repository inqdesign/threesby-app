import React from 'react';
import { Heart } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useInteractions } from '../hooks/useInteractions';
import { AuthModal } from './AuthModal';
import { UserBadge } from './UserBadge';
import type { Pick } from '../types';
import { cn } from '../lib/utils';
import { cva, type VariantProps } from 'class-variance-authority';

const pickCardVariants = cva(
  'rounded-lg overflow-hidden transition-all',
  {
    variants: {
      variant: {
        feed: 'bg-white shadow-sm hover:shadow-md cursor-pointer',
        Pick: 'bg-white shadow-sm hover:shadow-md cursor-pointer',
        myPick: 'aspect-square relative bg-white shadow-sm hover:shadow-md cursor-pointer',
      },
      display: {
        desktop: '',
        mobile: 'flex items-center gap-4 p-2 border-b border-gray-200',
      },
    },
    defaultVariants: {
      variant: 'feed',
      display: 'desktop',
    },
  }
);

interface PickCardProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof pickCardVariants> {
  pick?: Pick & {
    profile?: {
      id: string;
      full_name: string | null;
      title: string | null;
      avatar_url?: string | null;
      is_admin?: boolean;
      is_creator?: boolean;
      is_brand?: boolean;
    };
    image_url_low?: string; // Added for LQIP
  };
  category?: 'books' | 'products' | 'places';
  index?: number;
  isEmpty?: boolean;
  onClick?: () => void;
  display?: 'desktop' | 'mobile';
  children?: React.ReactNode;
}

export const PickCard = React.memo(
  ({
    pick,
    className,
    variant = 'feed',
    display = 'desktop',
    category,
    index,
    isEmpty = false,
    onClick,
    children,
    ...props
  }: PickCardProps) => {
    // Navigation functionality removed as it wasn't being used
    const { user } = useAuth();
    const { savePick, unsavePick, isSaved } = useInteractions();
    const [saved, setSaved] = React.useState(false);
    const [showAuthModal, setShowAuthModal] = React.useState(false);
    const [loading, setLoading] = React.useState(false);

    React.useEffect(() => {
      if (user && pick) {
        checkSavedStatus();
      }
    }, [user, pick]);

    React.useEffect(() => {
      const images = document.querySelectorAll('.lazy-load');
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            if (img.dataset.src) {
              img.src = img.dataset.src;
            }
            observer.unobserve(img);
          }
        });
      });
      images.forEach((img) => observer.observe(img));
      return () => observer.disconnect();
    }, []);

    const checkSavedStatus = async () => {
      if (!pick) return;
      const isSavedPick = await isSaved(pick.id);
      setSaved(isSavedPick);
    };

    const handleSave = async (e: React.MouseEvent) => {
      e.stopPropagation();
      if (!user) {
        setShowAuthModal(true);
        return;
      }

      setLoading(true);
      try {
        if (saved) {
          await unsavePick(pick!.id);
        } else {
          await savePick(pick!.id);
        }
        setSaved(!saved);
      } catch (error) {
        console.error('Error updating save status:', error);
      } finally {
        setLoading(false);
      }
    };

    const handleCardClick = () => {
      onClick?.();
    };

    const showProfileInfo = variant === 'feed';
    const showPickInfo = variant === 'feed' || variant === 'Pick';
    const showSaveAndFollow = variant === 'feed' || variant === 'Pick';
    const showRankLabel = variant === 'myPick' || (variant === 'Pick' && display === 'desktop');

    const rankLabel = index !== undefined ? `#${String(index + 1).padStart(2, '0')}` : null;
    const optimizedImageUrl = pick?.image_url ? `${pick.image_url}?w=300&h=300&format=webp` : undefined;

    if (isEmpty) {
      return (
        <div
          className={cn(
            pickCardVariants({ variant, display, className }),
            'relative aspect-square bg-[#f5ffde] border border-dashed border-[#9d9b9b] cursor-pointer hover:bg-[#f0ffcc] transition-colors',
            index === 0 && 'rounded-tl-lg',
            index === 2 && 'rounded-tr-lg',
            index === 6 && 'rounded-bl-lg',
            index === 8 && 'rounded-br-lg'
          )}
          onClick={handleCardClick}
          {...props}
        >
          {showRankLabel && rankLabel && (
            <div className="absolute top-2 right-2 text-[10px] text-[#9d9b9b]">
              {rankLabel}
            </div>
          )}
          {children}
        </div>
      );
    }

    return (
      <>
        <article
          className={cn(pickCardVariants({ variant, display, className }))}
          onClick={handleCardClick}
          {...props}
        >
          {showRankLabel && rankLabel && (
            <div className="absolute top-2 right-2 z-10 text-[10px] text-[#9d9b9b]">
              {rankLabel}
            </div>
          )}

          {variant === 'myPick' && pick && (
            display === 'desktop' ? (
              <img
                src={pick.image_url_low || optimizedImageUrl || 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1 1"%3E%3Crect width="1" height="1" fill="%23CCCCCC"/%3E%3C/svg%3E'}
                data-src={optimizedImageUrl}
                alt={pick.title}
                className="w-full h-full object-cover lazy-load"
                loading="lazy"
                onError={(e) => {
                  e.currentTarget.src = 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1 1"%3E%3Crect width="1" height="1" fill="%23EEEEEE"/%3E%3C/svg%3E';
                }}
              />
            ) : (
              <>
                <img
                  src={pick.image_url_low || optimizedImageUrl || 'https://via.placeholder.com/20'}
                  data-src={optimizedImageUrl}
                  alt={pick.title}
                  className="w-16 h-16 rounded-lg object-cover lazy-load"
                  loading="lazy"
                  onError={(e) => {
                    e.currentTarget.src = 'https://via.placeholder.com/150?text=Image+Not+Found';
                  }}
                />
                <div className="flex-1">
                  <h3 className="text-base font-medium text-[#252525] truncate">{pick.title}</h3>
                  <div className="text-sm text-[#9d9b9b]">{pick.reference}</div>
                </div>
              </>
            )
          )}

          {variant !== 'myPick' && pick && (
            display === 'desktop' ? (
              <>
                {showProfileInfo && pick.profile && (
                  <div className="p-4 border-b border-gray-100">
                    <Link
                      to={`/profile/${pick.profile.id}`}
                      className="flex items-center justify-between"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <div className="flex items-center gap-3">
                        {pick.profile.avatar_url ? (
                          <img
                            src={pick.profile.avatar_url}
                            alt={pick.profile.full_name || ''}
                            className="w-10 h-10 rounded-full object-cover"
                          />
                        ) : (
                          <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <span className="text-gray-500 text-lg">
                              {pick.profile.full_name?.[0] || '?'}
                            </span>
                          </div>
                        )}
                        <div>
                          <p className="text-sm text-gray-500">
                            {pick.profile.title || 'Designer'}
                          </p>
                          <div className="flex items-center gap-1">
                            <h3 className="font-medium text-gray-900">
                              {pick.profile.full_name || 'Anonymous'}
                            </h3>
                            <UserBadge
                              isAdmin={pick.profile.is_admin}
                              isCreator={pick.profile.is_creator}
                              isBrand={pick.profile.is_brand}
                              brandImageUrl={pick.profile.avatar_url || undefined}
                            />
                          </div>
                        </div>
                      </div>

                      {showSaveAndFollow && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            e.preventDefault();
                          }}
                          className="px-4 py-1.5 text-sm border border-gray-900 text-gray-900 rounded-full hover:bg-gray-50 transition-colors"
                        >
                          Follow
                        </button>
                      )}
                    </Link>
                  </div>
                )}

                <div className="aspect-square relative">
                  <img
                    src={pick.image_url_low || optimizedImageUrl || 'https://via.placeholder.com/20'}
                    data-src={optimizedImageUrl}
                    alt={pick.title}
                    className="w-full h-full object-cover lazy-load"
                    loading="lazy"
                    onError={(e) => {
                      e.currentTarget.src = 'https://via.placeholder.com/150?text=Image+Not+Found';
                    }}
                  />
                </div>

                {showPickInfo && (
                  <div className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2 text-sm text-gray-500">
                        <span>{pick.reference}</span>
                        <span className="text-gray-300">•</span>
                        <span>4 years</span>
                      </div>
                      {showSaveAndFollow && (
                        <button
                          onClick={handleSave}
                          disabled={loading}
                          className={`transition-colors disabled:opacity-50 ${
                            saved ? 'text-red-500' : 'text-gray-400 hover:text-red-500'
                          }`}
                        >
                          <Heart className={`w-5 h-5 ${saved ? 'fill-current' : ''}`} />
                        </button>
                      )}
                    </div>
                    <h2 className="text-lg font-medium text-gray-900">{pick.title}</h2>
                  </div>
                )}
              </>
            ) : (
              <>
                <img
                  src={pick.image_url_low || optimizedImageUrl || 'https://via.placeholder.com/20'}
                  data-src={optimizedImageUrl}
                  alt={pick.title}
                  className="w-16 h-16 rounded-lg object-cover lazy-load"
                  loading="lazy"
                  onError={(e) => {
                    e.currentTarget.src = 'https://via.placeholder.com/150?text=Image+Not+Found';
                  }}
                />
                <div className="flex-1">
                  <h3 className="text-base font-medium text-[#252525] truncate">{pick.title}</h3>
                  <div className="text-sm text-[#9d9b9b]">{pick.reference}</div>
                </div>
              </>
            )
          )}
        </article>
        <AuthModal isOpen={showAuthModal} onClose={() => setShowAuthModal(false)} mode="login" />
      </>
    );
  }
);

export default PickCard;